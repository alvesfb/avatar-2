// src/main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { importProvidersFrom } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { environment } from './environments/environment';

// Configura√ß√£o global da aplica√ß√£o
if (environment.production) {
  // Desabilita logs em produ√ß√£o
  console.log = console.warn = console.info = () => {};
} else {
  // Log de inicializa√ß√£o em desenvolvimento
  console.log('üöÄ Iniciando Avatar Miniatura - LIA');
  console.log('üîß Ambiente:', environment.production ? 'Produ√ß√£o' : 'Desenvolvimento');
  console.log('üåê Regi√£o Azure:', environment.azure.speechRegion);
  console.log('üé≠ Avatar:', environment.azure.avatar.character);
  console.log('üó£Ô∏è Voz:', environment.azure.avatar.voiceName);
  
  if (environment.azure.avatar.custom.enabled) {
    console.log('üë§ Avatar personalizado habilitado:', environment.azure.avatar.custom.avatarId);
  }
}

// Verifica√ß√µes de compatibilidade
function checkBrowserCompatibility(): boolean {
  const checks = {
    webrtc: typeof RTCPeerConnection !== 'undefined',
    getusermedia: navigator.mediaDevices && navigator.mediaDevices.getUserMedia,
    webspeech: 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window,
    https: window.location.protocol === 'https:' || window.location.hostname === 'localhost',
    canvas: !!document.createElement('canvas').getContext,
    webaudio: typeof AudioContext !== 'undefined' || typeof (window as any).webkitAudioContext !== 'undefined'
  };

  const incompatible = Object.entries(checks)
    .filter(([_, supported]) => !supported)
    .map(([feature]) => feature);

  if (incompatible.length > 0) {
    // Filtrar webspeech do aviso se for a √∫nica incompatibilidade
    const criticalIncompatible = incompatible.filter(feature => feature !== 'webspeech');
    
    if (criticalIncompatible.length > 0) {
      console.warn('‚ö†Ô∏è Recursos cr√≠ticos n√£o suportados:', criticalIncompatible);
    }
    
    if (incompatible.includes('webspeech')) {
      console.info('‚ÑπÔ∏è Web Speech API nativa n√£o dispon√≠vel (usaremos Azure Speech Service)');
    }
    
    if (!checks.https) {
      console.error('‚ùå HTTPS √© obrigat√≥rio para WebRTC e microfone');
    }
    
    if (!checks.webrtc) {
      console.error('‚ùå WebRTC n√£o √© suportado neste navegador');
    }
    
    // Retorna false apenas se houver incompatibilidades cr√≠ticas
    return criticalIncompatible.length === 0;
  }

  console.log('‚úÖ Todos os recursos necess√°rios s√£o suportados');
  return true;
}

// Inicializa√ß√£o da aplica√ß√£o
async function initializeApp() {
  try {
    // Verificar compatibilidade do navegador
    const isCompatible = checkBrowserCompatibility();
    
    if (!isCompatible && environment.production) {
      // Em produ√ß√£o, ainda tenta inicializar mesmo com incompatibilidades
      console.warn('‚ö†Ô∏è Iniciando com funcionalidades limitadas');
    }

    // Verificar se as configura√ß√µes obrigat√≥rias est√£o presentes
    if (!environment.azure.speechKey || environment.azure.speechKey === 'YOUR_AZURE_SPEECH_KEY') {
      console.error('‚ùå Azure Speech Key n√£o configurada');
      if (environment.production) {
        throw new Error('Configura√ß√£o do Azure Speech Service n√£o encontrada');
      }
    }

    if (!environment.chatbot.apiUrl || environment.chatbot.apiUrl === 'https://your-api-endpoint.com/chat') {
      console.error('‚ùå URL da API do chatbot n√£o configurada');
      if (environment.production) {
        throw new Error('Configura√ß√£o da API do chatbot n√£o encontrada');
      }
    }

    // Bootstrap da aplica√ß√£o Angular
    const app = await bootstrapApplication(AppComponent, {
      providers: [
        importProvidersFrom(FormsModule),
        // Adicionar outros providers conforme necess√°rio
      ]
    });

    console.log('‚úÖ Aplica√ß√£o inicializada com sucesso');
    return app;

  } catch (error) {
    console.error('‚ùå Erro ao inicializar aplica√ß√£o:', error);
    
    // Mostrar mensagem de erro amig√°vel ao usu√°rio
    showErrorMessage(error);
    throw error;
  }
}

// Fun√ß√£o para mostrar mensagens de erro
function showErrorMessage(error: any) {
  const errorContainer = document.createElement('div');
  errorContainer.innerHTML = `
    <div style="
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(220, 53, 69, 0.95);
      color: white;
      padding: 24px;
      border-radius: 12px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      max-width: 400px;
      width: 90%;
      text-align: center;
      z-index: 10000;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    ">
      <h3 style="margin: 0 0 12px 0; font-size: 18px;">‚ùå Erro de Inicializa√ß√£o</h3>
      <p style="margin: 0 0 16px 0; font-size: 14px; line-height: 1.4;">
        ${error.message || 'N√£o foi poss√≠vel inicializar o assistente virtual.'}
      </p>
      <button onclick="window.location.reload()" style="
        background: white;
        color: #dc3545;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 500;
      ">
        Tentar Novamente
      </button>
    </div>
  `;
  
  document.body.appendChild(errorContainer);
}

// Aguarda o DOM estar pronto antes de inicializar
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeApp);
} else {
  initializeApp();
}

// Manipula√ß√£o de erros globais n√£o capturados
window.addEventListener('unhandledrejection', (event) => {
  console.error('‚ùå Promise rejeitada n√£o tratada:', event.reason);
  
  if (!environment.production) {
    // Em desenvolvimento, mostra o erro
    event.preventDefault();
  }
});

window.addEventListener('error', (event) => {
  console.error('‚ùå Erro JavaScript global:', event.error);
  
  if (!environment.production) {
    // Em desenvolvimento, permite que o erro seja mostrado
    return true;
  }
  
  return false;
});

// Exportar fun√ß√£o de inicializa√ß√£o para uso em testes
export { initializeApp };